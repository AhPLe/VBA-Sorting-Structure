'Class CheckErrorPrintout
Option Explicit
'this class is for all the error checking info that could or needs to be relayed
'this class is similar to the worksheetprintout
Private Const printColumns As Integer = 5


Public strError As Collection
Public cellError As Collection
'Note: cellError may not be a cell, it could just be a row

'nonGreenFormula is an addon to include with tubeinfo since the actual error tube number wouldn't be present
Public Header As String
Public tubeErrors As Collection
'tubeErrors is a collection of tubes - similar to worksheetprintout
Private tempTube As TubeInfo
Private tempRange As Range

Private Sub Class_Initialize()
    Header = ""
    Set tubeErrors = New Collection
    Set strError = New Collection
    Set cellError = New Collection
End Sub

Private Sub Class_Terminate()
    Set tubeErrors = Nothing
    Set strError = Nothing
    Set cellError = Nothing
End Sub

Function changeHeader(newHead As String)
    Header = newHead
End Function

Function addToHeader(moreHead As String)
    Header = Header + moreHead
End Function

Public Function errorCount() As Integer
    errorCount = tubeErrors.Count
End Function

Public Sub AddError(newTube As TubeInfo, newStrError As String, newCellError As String)
    Set tempTube = newTube
    tubeErrors.Add tempTube
    strError.Add newStrError
    cellError.Add newCellError
End Sub

Public Function GetPrintColumns() As Integer
    GetPrintColumns = printColumns
End Function

Public Function errorPrint(curWksht As Worksheet, startRange As Range) As Range
    'ideally, both this and FoundTube should contain co-dependencied functions and in the CheckError class

'this returns a range to allow each printout to be printed separately for each worksheet
'while still allowing them to be printed right after one another

'this was copied from Updated_Sample_Week_Check and is currently being modified to fit CheckErrorPrintout
    
    
    Dim msgDelivered As Boolean
    msgDelivered = False
    
    Dim startRow As Integer
    Dim startCol As Integer
    startRow = startRange.Row
    startCol = startRange.Column
    
    Dim endRow As Integer
    Dim i As Integer
    Dim j As Integer
    
    Dim headerRows As Integer
    headerRows = 1
    Dim numColumns As Integer
    numColumns = 5
    
    Set errorPrint = Range(Cells(startRow, startCol).Address())
    
    Call ClearCells.ClearCellBox(curWksht, errorPrint, headerRows)
    Call ClearCells.FormatCellBox(curWksht, errorPrint, headerRows, numColumns)
    'I could potentially clear on each line, but this is the way I use for now
    
    curWksht.Cells(startRow, startCol).Value = Header
    startRow = startRow + headerRows
    Set errorPrint = Range(Cells(startRow, startCol).Address())
    
    Call ClearCells.ClearCellBox(curWksht, errorPrint, tubeErrors.Count)
    Call ClearCells.FormatCellBox(curWksht, errorPrint, tubeErrors.Count, numColumns)
    
    For i = 1 To tubeErrors.Count
        j = 0
        curWksht.Cells(startRow + i - 1, startCol + j).Value = tubeErrors(i).TR
        j = j + 1
        curWksht.Cells(startRow + i - 1, startCol + j).Value = tubeErrors(i).ID
        j = j + 1
        curWksht.Cells(startRow + i - 1, startCol + j).Value = tubeErrors(i).EndDate
        j = j + 1
        'curWksht.Cells(startRow + i - 1, startCol + j).Value = tubeErrors(i).ActEndDate
        'j = j + 1
        'curWksht.Cells(startRow + i - 1, startCol + j).Value = tubeErrors(i).TubeChamber
        'j = j + 1
        curWksht.Cells(startRow + i - 1, startCol + j).Value = strError(i)
        j = j + 1
        curWksht.Cells(startRow + i - 1, startCol + j).Value = cellError(i)
        'IF MODIFIED, SUBTRACTED, OR ADDED TO PLEASE LOOK AT ClearCells Variable and numColumns var here. It is hardcoded as 5 columns currently
        
        'Note: cellError may not be a cell, it could just be a row
        'j = j + 1
        
        'Dim k As Integer
    
        'For k = 0 To tubeErrors(i).GetNumCoupons - 1
        '    curWksht.Cells(startRow + i - 1, startCol + j + k).Value = CStr(tubeErrors(i).GetCouponColor(k))
        'Next k
        
        endRow = i - 1
        'should go from i = 0 to tubeErrors.count - 1, but the other option of 1 to tubeErrors.Count also works
        If j >= numColumns And Not msgDelivered Then
            MsgBox ("The formatting will be poor, please modify numColumns and/or endCol in ClearCells")
            msgDelivered = True
        End If
    Next i
    If tubeErrors.Count > 0 Then
        Set errorPrint = Range(Cells(startRow + endRow + 1, startCol).Address())
    End If
    
End Function


